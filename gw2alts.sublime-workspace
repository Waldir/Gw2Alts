{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"bo",
				"border-radius"
			],
			[
				"te",
				"text-align"
			],
			[
				"10px",
				"10px"
			],
			[
				"content",
				"content-color"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"ex",
				"extend"
			],
			[
				"he",
				"height"
			],
			[
				"cont",
				"content-width"
			],
			[
				"foot",
				"footer"
			],
			[
				"header",
				"header-color"
			],
			[
				"background-",
				"background-color"
			],
			[
				"background",
				"background-position"
			],
			[
				"no",
				"no-repeat"
			],
			[
				"content-",
				"content-width"
			],
			[
				"user_",
				"user_email"
			],
			[
				"in",
				"inline-block"
			],
			[
				"al",
				"align-right"
			],
			[
				"pro",
				"profession"
			],
			[
				"total",
				"totalItems"
			],
			[
				"items",
				"itemsList"
			],
			[
				"tbl-",
				"tbl-header-color"
			],
			[
				"box",
				"box-shadow"
			],
			[
				"footer",
				"footer-container"
			],
			[
				"text",
				"text-pop"
			],
			[
				"upda",
				"updateUserInfo"
			],
			[
				"a",
				"absolute"
			],
			[
				"pos",
				"position"
			],
			[
				"head",
				"head-container"
			],
			[
				"icon",
				"icon-hover"
			],
			[
				"po",
				"position"
			],
			[
				"lin",
				"link-fade"
			],
			[
				"border",
				"border-radius"
			],
			[
				"mi",
				"mixin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "js/js.js",
			"settings":
			{
				"buffer_size": 7116,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/alts/create-alt.php",
			"settings":
			{
				"buffer_size": 968,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/Tools.class.php",
			"settings":
			{
				"buffer_size": 14750,
				"line_ending": "Windows"
			}
		},
		{
			"file": "my-alts.php",
			"settings":
			{
				"buffer_size": 1798,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/Validate.class.php",
			"settings":
			{
				"buffer_size": 8732,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/includes.php",
			"settings":
			{
				"buffer_size": 565,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/alts/Gw2Alts.class.php",
			"settings":
			{
				"buffer_size": 12500,
				"line_ending": "Windows"
			}
		},
		{
			"file": "includes/Process.class.php",
			"settings":
			{
				"buffer_size": 975,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n\nclass User\n{\n  private $user_id = null;\n  private $user_name = null;\n  private $user_email = null;\n\n  /**\n  * the function \"__construct()\" automatically starts whenever an object of this class is created,\n  * you know, when you do \"$registration = new Registration();\"\n  */\n  public function __construct()\n  {\n    // create/read session, absolutely necessary\n    session_start();\n\n    if ( isset( $_POST['register'] ) )\n      $this->registerNewUser();\n\n    // check the possible login actions:\n    // if user tried to log out (happen when user clicks logout button)\n    if ( isset( $_POST['logout'] ) && $this->isLoggedIn( ) )\n      $this->doLogout();\n\n    // login via post data (if user just submitted a login form)\n    if ( isset( $_POST['login'] ) )\n      $this->dologinWithPostData();\n\n    // Anything in here needs the user to be logged in.\n    if( $this->isLoggedIn( ) )\n    {\n      // update info \n      if( isset( $_POST['update']))\n        $this->updateUserInfo();\n\n      $this->user_id    = $_SESSION['user_id'];\n      $this->user_name  = $_SESSION['user_name'];\n      $this->user_email = $_SESSION['user_email'];\n\n    }\n  }\n\n  /**\n   * @retuen $user_id;\n   */\n  public function getUserId()\n  {\n    return $this->user_id;\n  }\n\n   /**\n   * @retuen $user_name;\n   */\n  public function getUserName()\n  {\n    return $this->user_name;\n  }\n\n  /**\n   * @retuen $user_email;\n   */\n  public function getUserEmail()\n  {\n    return $this->user_email;\n  }\n\n  /**\n  * handles the entire registration process. checks all error possibilities\n  * and creates a new user in the database if everything is fine\n  */\n  private function registerNewUser()\n  {\n    global $db;\n    try \n    {\n      // Check the Email\n      if ( empty( $_POST['newEmail'] ) )                                throw new Exception( 'Email: cannot be empty' );\n      if ( strlen( $_POST['newEmail'] ) > 64 )                          throw new Exception( 'Email: cannot be longer than 64 characters' );\n      if ( !filter_var($_POST['newEmail'], FILTER_VALIDATE_EMAIL ) )    throw new Exception( 'Email: not in a valid email format' );\n\n      // Chcekc the username\n      if ( empty( $_POST['newUsername'] ) )                             throw new Exception( 'Username: cannot be empty' );\n      if ( strlen( $_POST['newUsername'] ) > 64 || \n       strlen( $_POST['newUsername'] ) < 5 )                            throw new Exception( 'Username: between 5 and 64 characters long' );\n      if ( !preg_match( '/^[a-z\\d]{2,64}$/i', $_POST['newUsername'] ) ) throw new Exception( 'Username: only a-Z and numbers are allowed' );\n\n      // check the password\n      if ( empty( $_POST['newPassword'] ) )                             throw new Exception( 'Password: cannot be empty' );\n      if ( empty( $_POST['newPasswordCheck'] ) )                        throw new Exception( 'Re-enter Password: cannot be empty' );\n      if ( $_POST['newPassword'] !== $_POST['newPasswordCheck'] )       throw new Exception( 'Password: does not match re-entered password' );\n      if ( strlen( $_POST['newPassword'] ) < 6)                         throw new Exception( 'Password: minimum length of 6 characters' );\n\n      // One last check\n      if ( !empty( $_POST['newUsername'] )\n       && strlen( $_POST['newUsername'] ) <= 64\n       && strlen( $_POST['newUsername'] ) >= 5\n       && preg_match( '/^[a-z\\d]{2,64}$/i', $_POST['newUsername'] )\n       && !empty( $_POST['newEmail'] )\n       && strlen( $_POST['newEmail'] ) <= 64\n       && filter_var( $_POST['newEmail'], FILTER_VALIDATE_EMAIL )\n       && !empty( $_POST['newPassword'] )\n       && !empty( $_POST['newPasswordCheck'] )\n       &&  ($_POST['newPassword'] === $_POST['newPasswordCheck'] ) ) \n      {\n       // escaping, additionally removing everything that could be (html/javascript-) code\n       $newUsername = strip_tags($_POST['newUsername'], ENT_QUOTES );\n       $newEmail    = strip_tags($_POST['newEmail'],    ENT_QUOTES );\n\n       // What to check for in the db\n       $aWhere = array( 'user_name'  => $newUsername, \n                        'user_email' => $newEmail );\n       \n       // check if user or email address already exists\n       $db->Select( 'users', $aWhere, '`user_name`, `user_email`', '', '', false, ' OR' );\n\n       // Stop the username or email is in use\n       if ( $db->iRecords == 1 )\n        throw new Exception( 'Sorry, that username and or email address is already taken.' );\n\n       // vars to insert\n       $aVars = array( 'user_name'          => $newUsername, \n                       'user_password_hash' => $this->passHash( $_POST['newPassword'] ), \n                       'user_email'         => $newEmail );\n       \n       // write new user's data into database\n       // if user has been added successfully\n       if ( $db->Insert( $aVars, 'users' ) )\n       {\n                  // write user data into PHP SESSION ( a file on your server )\n          $_SESSION['user_name']  = $aVars['user_name'];\n          $_SESSION['user_email'] = $aVars['user_email'];\n          $_SESSION['user_id']    = $db->iLastInsertId;\n          $_SESSION['user_login_status'] = 1;\n        return Tools::returnMsg( 'Your account has been created successfully <br> and you are now logged in..', 1, true, 'User-Menu' );\n       } else\n        throw new Exception( 'Sorry, your registration failed. ' );\n      } else {\n       throw new Exception( 'Sorry, there was a problem.' );\n      }\n\n     } catch ( Exception $e ) {\n      return Tools::returnMsg( $e->getMessage(), 0 );\n     } // end try/catch\n\n    } // end registerNewUser()\n\n  /**\n   * log in with post data\n   */\n  private function dologinWithPostData()\n  {\n    global $db;\n    try \n    {\n      // check login form contents\n      if ( empty( $_POST['userName'] ) )       throw new Exception( 'Username: cannot be empty.' );\n      if ( empty( $_POST['userPassword'] ) )   throw new Exception( 'Password: cannot be empty.' );\n\n      // one last check\n      if ( !empty( $_POST['userName'] ) && !empty( $_POST['userPassword'] ) ) \n      {\n        // database query, getting all the info of the selected user (allows login via email address in the\n        // username field)\n\n        // What to check for in the db\n        $aWhere = array( 'user_name'  => $_POST['userName'], \n                         'user_email' => $_POST['userName'] );\n\n        if( !$result = $db->Select( 'users', $aWhere, '`user_id`, `user_name`, `user_email`, `user_password_hash`', '', '', false, ' OR' ) )\n          throw new Exception( 'This user does not exist.');\n\n        // if this user exists\n        if ( $db->records < 1 )\n          throw new Exception( 'This user does not exist.');\n\n        // using PHP 5.5's password_verify() function to check if the provided password fits\n        // the hash of that user's password\n        if ( password_verify( $_POST['userPassword'], $result['user_password_hash'] ) ) \n        {\n          // write user data into PHP SESSION ( a file on your server )\n          $_SESSION['user_name']  = $result['user_name'];\n          $_SESSION['user_email'] = $result['user_email'];\n          $_SESSION['user_id']    = $result['user_id'];\n          $_SESSION['user_login_status'] = 1;\n          return Tools::returnMsg( \"Welcome back {$result['user_name']}\", 1, true, 'User-Menu' );\n        } else {\n            throw new Exception( 'Wrong password. Try again. ' );\n        } \n      } else {\n        throw new Exception( 'Sorry there was a problem.' );\n      }\n    } catch ( Exception $e ) {\n      return Tools::returnMsg( $e->getMessage(), 0 );\n    }\n  } // end function dologinWithPostData()\n\n  /**\n   * perform the logout\n   */\n  public function doLogout()\n  {\n    // delete the session of the user\n    $_SESSION = array();\n    session_destroy();\n    // return a little feeedback message\n   return Tools::returnMsg( 'You have been logged out', 1, true, 'User-Menu' );\n  }\n\n  /**\n   * simply return the current state of the user's login\n   * @return boolean user's login status\n   */\n  public function isLoggedIn()\n  {\n    if ( isset( $_SESSION['user_login_status'] ) AND isset( $_SESSION['user_id'] ) AND $_SESSION['user_login_status'] == 1 )\n      return true;\n    // default return\n    return false;\n  }\n\n  public function getUserInfo()\n  {\n    global $db;\n\n    if( $this->isLoggedIn() )\n    {                \n      if( $result = $db->select( 'users', $this->aWhereFromSession(), '`user_name`, `user_email`' ) )\n        return $result;\n      else\n        return false;\n    }\n    return false;\n  }\n\n  public function updateUserInfo()\n  {\n    global $db;\n    try\n    {\n      // Initialize the array\n      $aSet = array();\n\n      // if the new email is not empty and its not the same as the curent one update\n      if( !empty( $_POST['newEmail'] ) && $_POST['newEmail'] !== $_SESSION['user_email'] )\n      {\n        if ( strlen( $_POST['newEmail'] ) > 64 )\n          throw new Exception( 'Email: cannot be longer than 64 characters' );\n        \n        if ( !filter_var( $_POST['newEmail'], FILTER_VALIDATE_EMAIL ) ) \n          throw new Exception( 'Email: not in a valid email format' );\n        \n        // lets check if the same email exists else where.\n        if( !$db->Select( 'users', array( 'user_email' => $_POST['newEmail'] ), '`user_id`', '', 1 ) )\n          throw new Exception( 'There was a problem finding the user, log out and try again.' );\n\n        // password doesnt match the one in the database\n        if ( $db->records == 1)\n          throw new Exception( 'This email address is already in use' );\n\n        // Add the email to our update array.\n        $aSet['user_email'] = $_POST['newEmail'];\n      }\n\n      if( !empty( $_POST['currentPassword'] ) )\n      {\n        if ( empty( $_POST['newPassword'] ) )                             throw new Exception( 'New Password: cannot be empty' );\n        if ( empty( $_POST['newPasswordCheck'] ) )                        throw new Exception( 'Re-entered password: cannot be empty' );\n        if ( $_POST['newPassword'] !== $_POST['newPasswordCheck'] )       throw new Exception( 'Password: does not match re-entered password' );\n        if ( strlen( $_POST['newPassword'] ) < 6)                         throw new Exception( 'Password: minimum length of 6 characters' );\n        if ( $_POST['currentPassword'] == $_POST['newPassword'] )         throw new Exception( 'The current password is identical to the new one.' );\n\n        // lets look for the old password.\n        if( !$result = $db->Select( 'users', array( 'user_name' => $_SESSION['user_name'] ), '`user_password_hash`' ) )\n          throw new Exception( 'There was a problem finding the user, log out and try again.' );\n\n        // password doesnt match the one in the database\n        if ( !password_verify( $_POST['currentPassword'], $result['user_password_hash'] ) )\n          throw new Exception( 'The password you have entered does not match your current one .' );\n\n        // password is ok so lets add it to the array (hash it first)\n        $aSet['user_password_hash'] = $this->passHash( $_POST['newPassword'] );\n      }\n\n      // if our array has some values try to update.\n      if( !empty( $aSet ) )\n      {\n        if( $db->Update( 'users', $aSet, $this->aWhereFromSession() ) )\n        {\n          // write user data into PHP SESSION\n          if( !empty( $aSet['user_name']  ) ) $_SESSION['user_name']  = $aSet['user_name'];\n          if( !empty( $aSet['user_email'] ) ) $_SESSION['user_email'] = $aSet['user_email'];\n          $_SESSION['user_login_status'] = 1;\n          return Tools::returnMsg( 'Your setting have been update.' );\n        }\n      }\n\n    } catch ( Exception $e ) {\n      return Tools::returnMsg( $e->getMessage(), 0 );\n    }\n    return Tools::returnMsg( 'Nothing has been updated.', 0 );\n  }\n\n  // returns a hashed password.\n  // just for shorter code.\n  public function passHash( $pass )\n  {\n    return password_hash( $pass, PASSWORD_DEFAULT );\n  }\n\n  public function aWhereFromSession()\n  {\n    return array( 'user_name'  => $_SESSION['user_name'], \n                  'user_email' => $_SESSION['user_email'],\n                  'user_id'    => $_SESSION['user_id'] );\n  }\n} // end class",
			"file": "includes/members/User.class.php",
			"file_size": 12137,
			"file_write_time": 130582281920000000,
			"settings":
			{
				"buffer_size": 12136,
				"line_ending": "Unix"
			}
		},
		{
			"file": "clock.php",
			"settings":
			{
				"buffer_size": 473,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n\n/* Define */\ndefine(\"THUMB_PREF\", '_thb_' );\ndefine(\"DEFAULT_GAL_DIR\", 'images' ); \ndefine(\"THUMB_MAX_SIZE\", 120 );// Define the maximum thumbnail size in pixels. Whether the height or width is 120 is calculated below\ndefine(\"GAL_MAX_ROW_ITEMS\", 5 ); // Define the maximum amount of images in each row.\ndefine(\"GAL_MAX_ITEMS_PER_PAGE\", 20 );// Number of images per page.\n$dir = ( isset( $_GET['dir'] ) ? $_GET['dir'] : DEFAULT_GAL_DIR  );  \n\n/* Table Define */\ndefine( \"CMS_SITESETTING_TBL\", 'cms_sitesettings' );\ndefine( \"VIDEOS_TBL\", 'myvideos' );\ndefine( \"PAGETEXT_TBL\", 'page_text' );\ndefine( \"NAVIGATION_TBL\", 'navigation' );\n\ndefine( \"MAX_UPLOAD_SIZE\", 2000 );\n\n/* Include */\ninclude ( 'class.functions.php' );\ninclude ( 'class.mysql.php' );\ninclude ( 'gallery.class.php' );\ninclude ( 'upload.class.php' );\n\ninclude ( 'videos.class.php' );\n\n  /*****************/\n /* Session Class */\n/*****************/\nclass Session\n{\n	var $loggedin;\n	var $siteSettings = array();\n	protected $MySQL;\n\n	  /*********************/\n	 /* Class constructor */\n	/*********************/\n	function __construct( MySQL $db ){\n	  session_start(); 			/* Start the session */\n	  $this->MySQL = $db; 		/* Assign the MySQL Object */\n	  $this->loginCheck();		/* Check if the user is logged in */\n	  $this->getSiteSetting();	/* Load the site Settings */\n	\n	  /* Post:todo detected */\n	  if( !empty( $_POST['todo'] ) )\n	  {\n		/* This Actions require the user to be loged in */\n		if( $this->loggedin )\n		{	\n			switch( $_POST['todo'] )\n			{\n				case 'UploadSubmit'   : Upload::upload(); 			break; /* Form: Upload image */ \n				case 'NewDir'         : Upload::CreateDir(); 		break; /* Form: New directory */\n				case 'DeleteFiles'    : Upload::delete(); 			break; /* Form: Delete file */ \n				case 'loadvideo'      : MyVideo::loadVideoJson(); 	break; /* Form: Update Video */\n				case 'delvideo'       : MyVideo::delete(); 			break; /* Form: Delete Video */\n				case 'savevideo'      : MyVideo::save(); 			break; /* Form: Delete Video */\n				case 'save_settings'  : $this->saveSiteSettings(); 	break; /* Form: Save web site settings */\n				case 'updatePageText' : $this->savePageText(); 		break; /* Form: Update page text */\n				case 'addPage'        : $this->savePageText(); 		break; /* Form: Add page */\n				case 'deletePageText' : $this->deletePageText(); 	break; /* Form: Update page text */ \n				case 'editNavLink'    : $this->editNavLink(); 		break; /* Form: Edit Navigation link */\n				case 'addNavLink'     : $this->addNavLink(); 		break; /* Form: Add Navigation link */\n				case 'adminLogout'    : $this->logOut(); 			break; /* Form: Logout */\n				default: break;\n			} \n		}\n			/* This actions do not require the user to be loged in */\n			switch( $_POST['todo'] )\n			{\n				case 'adminLogoin'  : $this->adminLogin ();   break; /* Form: Admin login */\n				case 'contact_form' : $this->sendEmailForm(); break; /* Form: Contact */\n				default: break;\n			}\n	  }\n	}\n\n	  /******************/\n	 /* Check Login    */\n	/******************/\n	function loginCheck() {\n	$this->loggedin = isset( $_SESSION['admin'] ) ? true : false;\n	}\n	\n	  /******************/\n	 /* Admin Login    */\n	/******************/\n	function adminLogin()\n	{\n	  /* Empty username and or Password */\n	  if( empty( $_POST['admin_username'] ) ) { Func::returnMsg( 'No username was entered', 0 ); return false; }\n	  if( empty( $_POST['admin_password'] ) ) { Func::returnMsg( 'No password was entered', 0 ); return false; }\n	  \n	  /* Fetch the information from the Database */\n	  $this->MySQL->Select( CMS_SITESETTING_TBL, '', 'admin_username, admin_password' );\n	  $adminInfo = $this->MySQL->aArrayedResult;\n	  \n	  /* Username and or password do no match */\n	  if( $adminInfo['admin_password'] !== $_POST['admin_password'] ){ Func::returnMsg( 'Invalid password', 0 ); return false; }\n	  if( $adminInfo['admin_username'] !== $_POST['admin_username'] ){ Func::returnMsg( 'Invalid username', 0 ); return false; }\n	  \n	  /* Passed all the validation, log in */\n	  $_SESSION['admin'] = TRUE;\n	  Func::returnMsg( 'You are now logged in', 1, 1, 'adminLoginForm' );\n	  return true;\n	}\n\n	  /******************/\n	 /* Logout         */\n	/******************/\n	function logOut() \n	{\n	  session_destroy();\n	  unset( $_SESSION );\n	  Func::returnMsg( 'You have been looged out', 1, 1, 'adminLoginForm' );\n	}\n\n	  /******************/\n	 /* Get Page Text  */\n	/******************/\n	function getPageText ( $title = '' ) \n	{\n	\n	  $aWhere['title'] = $title !== '' ? $title : '';\n	  $sql =  $title !== '' ? $this->MySQL->Select( PAGETEXT_TBL, $aWhere, 'text', '', 1 ) : $this->MySQL->Select( PAGETEXT_TBL );\n	  if( $sql )\n	  {\n		if( $this->MySQL->iAffected > 1)\n		{\n		  return $this->MySQL->aArrayedResults;\n		} elseif( $this->MySQL->iAffected == 1 )\n		  return $title !== '' ?   Func::templateReplace( html_entity_decode( stripslashes( $this->MySQL->aArrayedResult['text'] ) ) ) : $this->MySQL->aArrayedResult;\n		} else {\n	    return false;\n	  }\n	}\n	\n	  /******************************/\n	 /* Check if page text exists  */\n	/******************************/\n	function pageExists ( $title ) \n	{\n	  $this->MySQL->ExecuteSQL( 'SELECT id FROM '.PAGETEXT_TBL.' WHERE `title` = \"'.$title.'\" LIMIT 1' );\n	  if( $this->MySQL->iAffected == 1 )\n	  {\n\n	    return true;\n	  } else {\n	    return false;\n	  }\n	}\n	\n	  /******************/\n	 /* Save Page Text  */\n	/******************/\n	function savePageText () \n	{\n	  $aSet['title'] = Func::SanitizeFilename( $_POST['title'] );\n	  $aSet['text']  = $_POST['text'];\n	  $aWhere['id']  = !empty( $_POST['id'] ) ? $_POST['id'] : '';\n	  if( $_POST['todo'] == 'updatePageText' )\n	  {  \n	    if( $this->MySQL->Update( PAGETEXT_TBL, $aSet, $aWhere ) ) \n	    {\n	      Func::returnMsg( $aSet['title'].' was Updated.' ); \n	    } else {\n	      Func::returnMsg( 'There was a problem updating:' .$this->MySQL->sLastError, 0 );\n	    }\n	  } elseif( $_POST['todo'] == 'addPage' ) {\n	    if( $this->MySQL->Insert( $aSet, PAGETEXT_TBL ) )\n		{\n		  Func::returnMsg( 'Page \"'.$aSet['title'].'\" was added.' );\n		} else {\n		  Func::returnMsg( 'Could not add page.' );	\n		}\n	  }\n	}\n\n	  /******************/\n	 /* Delete page text  */\n	/******************/\n	function deletePageText () \n	{\n	  $aWhere['id'] = $_POST['id'];\n	  if( $this->MySQL->Delete( PAGETEXT_TBL, $aWhere ) )\n	  {\n	    Func::returnMsg( 'Page was deleted', 1, 0, 'pageTextbar_'.$aWhere['id'] );\n	  } else {\n	    Func::returnMsg( 'page could not be deleted', 0 );\n	  }\n	}\n	  /******************/\n	 /* Get Setting    */\n	/******************/\n	function getSiteSetting () \n	{\n	  $this->MySQL->Select( CMS_SITESETTING_TBL );\n	  $this->siteSettings = $this->MySQL->aArrayedResult;	  \n	  foreach ( $this->MySQL->aArrayedResult as $key => $value) \n	  {\n	    if( $key == 'admin_password' )\n		{\n		  $this->siteSettings[$key] = '';\n		  continue; \n		}\n		$this->siteSettings[$key] = stripslashes( $this->siteSettings[$key] );\n	    define( $key, stripslashes( $value ) );\n	  }\n	  unset($value, $key);\n\n	}\n\n	  /******************/\n	 /* Update Setting */\n	/******************/\n	function saveSiteSettings ()\n	{\n	  $aUpdate = array();\n	  foreach ( $this->siteSettings as $key => $value) \n	  {\n		if( $value == $_POST[$key] ) { continue; }\n		if( $key == 'admin_password' && empty( $_POST[$key] )) { continue; }\n		$aUpdate[$key] = $_POST[$key];\n	  }\n	  unset($value, $key);\n	  if( empty( $aUpdate ) )\n	  {\n	   Func::returnMsg( 'Nothing was Changed', 0 ); \n	   return false;\n	  }\n	  if( $this->MySQL->Update( CMS_SITESETTING_TBL, $aUpdate ) ) \n	  {\n	    Func::returnMsg( 'Site Setting updated' ); \n		return true;\n	  } else {\n	    Func::returnMsg( 'There was a problem updating: ' .$this->MySQL->sLastError, 0 );\n		return false;\n	  }\n	}\n\n	  /******************/\n	 /* Get Navigation */\n	/******************/\n	function getNavigation ( $admin = false ) \n	{\n	  if ( $this->MySQL->Select( NAVIGATION_TBL, '', '*', 'nav_id' ) )\n	  {\n	  \n		$admin_nav = '\n		  <h3>How to:</h3>\n		  <ul>\n		  <li><u>Title:</u> Set to whatever you wish to be displayed on the navigation i.e <i>\"Home\"</i>, <i>\"Contact\"</i>.</li>\n		  <li><u>Link</u> Set to anything you want the link to point to.</li>\n		  <li><u>Link</u>: to point to a page within this site use <i>\"?p=\"</i>, i.e: <i>\"?p=page_title\"</i>.</li>\n		  <li><u>Link</u>: to point to a page outside of this site just provide the url, i.e: <i>\"http://site.com\"</i>.</li>\n		  <li><u>Link</u>: if left blank, the <i>\"Link\"</i> will automaticly be set to <i>\"?p=page_title\"</i> if the title was set to <i>\"Page title\"</i></li>\n		  <li><u>Link</u>: Spaces will be turned into \"_\" and other characters will be removed or replaced for url purposes.</li>\n		  <li><u>Delete:</u> To delete a <i>\"Link\"</i> leave the <i>\"Title\"</i> blank and hit <i>\"Update\"</i>.</li>\n		  <li><u>Add Page:</u> \n		  To add a <i>\"Page\"</i> for a <i>\"Link\"</i> simply add a new Navigation link, i.e: <i>\"About Us\"</i> and leave the <i>\"Link\"</i> blank,\n		  this will create a navigation <i>\"Link\"</i> that is called <i>\"About Us\"</i> and it will point to <i>\"?p=about_us\"</i>. Now go to <i>\"Add a page\"</i> \n		  below and create a page with <i>\"about_us\"</i> as the <i>\"Title</i> and whatever you wish your page body to be. Hit <i>\"Add\"</i> and your newly \n		  created <i>\"Link\"</i> will point to your newly created <i>\"Page\"</i>.</li>\n		  </ul>\n		  <hr>\n		<h2>Add new Link:</h2>\n		<div class=\"Y-Box\">\n			<form action=\"session.php\" method=\"post\">\n			Title: <input type=\"text\" name=\"nav_title\" />\n			Link:  <input type=\"text\" name=\"nav_link\" /> <input type=\"submit\" value=\"Add\" class=\"apply\">\n			<input type=\"hidden\" name=\"todo\" value=\"addNavLink\" />\n			</form>\n		</div>\n		 <hr>\n		<h2>Edit Navigation Links:</h2>\n		';\n		$navigation = \"<ul>\\n\";\n		foreach ( $this->MySQL->aArrayedResults as $nav ) \n		{\n		  $link = !empty( $nav['nav_link'] ) ? $nav['nav_link'] : '?p='.$nav['nav_short'];\n		  $navigation .= '<li><a href=\"'.$link.'\" title=\"'.$nav['nav_title'].'\">'.$nav['nav_title'].'</a></li>'.\"\\n\";\n		  $admin_nav  .= '\n		  <div style=\"background: #'.Func::cycleCell( 'dcdcdc', 'ebebeb' ).';\" class=\"table\" id=\"nav_admin_'.$nav['nav_id'].'\">\n			  <form action=\"session.php\" method=\"post\">\n			  Title: <input type=\"text\" name=\"nav_title\" value=\"'.$nav['nav_title'].'\"> \n			  Link: <input type=\"text\" name=\"nav_link\" value=\"'.$nav['nav_link'].'\" />\n			  <input type=\"hidden\" name=\"todo\" value=\"editNavLink\" />\n			  <input type=\"hidden\" name=\"nav_id\" value=\"'.$nav['nav_id'].'\" />\n			  <input type=\"submit\" value=\"Update\" class=\"apply\">\n			  </form> \n		  </div>\n		  ';\n		}\n		unset($nav);\n		\n	    $navigation .= \"</ul>\\n\";\n\n		  return $admin ? $admin_nav : $navigation;\n	  } else {\n	  return 'No Navigation links';\n	  }\n	}\n	\n	  /**************************/\n	 /* Get Edit Navigation Lik*/\n	/**************************/\n	function editNavLink() \n	{\n	  $aWhere['nav_id'] = !empty( $_POST['nav_id'] ) ? $_POST['nav_id'] : 0;\n	  \n	  if( $aWhere['nav_id'] == 0 ) { Func::returnMsg( 'Not a valid id', 0 ); return false; }\n	  if( empty( $_POST['nav_title'] ) )\n	  {\n	    if( $this->MySQL->Delete( NAVIGATION_TBL, $aWhere, 1) )\n		{\n	      Func::returnMsg( 'Navigation link was deleted', 1, 0, 'nav_admin_'.$aWhere['nav_id'] ); return true;\n		} else {\n		  Func::returnMsg( 'Could not delete navigation link', 0 ); return false;\n		}\n	  } else {\n	    $aSet['nav_title'] = $_POST['nav_title'];\n	    $aSet['nav_link']  = !empty( $_POST['nav_link'] ) ? $_POST['nav_link'] : '';\n		$aSet['nav_short'] = Func::SanitizeFilename( $aSet['nav_title'] );\n	    if( $this->MySQL->Update( NAVIGATION_TBL, $aSet, $aWhere) )\n		{\n		  Func::returnMsg( 'Navigation link \"'.$aSet['nav_title'].'\" was updated' ); return true;\n		} else {\n		  Func::returnMsg( 'Could not update \"'.$aSet['nav_title'].'\"', 0 ); return false;\n		}\n	  }\n	}\n	\n	  /**************************/\n	 /* Get Edit Navigation Lik*/\n	/**************************/\n	function addNavLink() \n	{\n	  if( !empty( $_POST['nav_title'] ) )\n	  {\n	    $aVars['nav_title'] = $_POST['nav_title'];\n	    $aVars['nav_link']  = !empty( $_POST['nav_link'] ) ? $_POST['nav_link'] : '';\n		$aVars['nav_short'] = Func::SanitizeFilename( $aVars['nav_title'] );\n		\n		if( $this->MySQL->Insert( $aVars, NAVIGATION_TBL ) )\n		{\n		  Func::returnMsg( 'Navigation link \"'.$aVars['nav_title'].'\" was added.' ); return true;\n		} else {\n		  Func::returnMsg( 'Navigation link could not be added', 0 ); return false;\n		}\n	  } else {\n	    Func::returnMsg( 'A title must be entered', 0 ); return false;\n	  }\n	}\n	\n	  /******************/\n	 /* Send Email     */\n	/******************/\n	function sendEmailForm()\n	{\n	  if( !Func::CheckEmail( $_POST['mail'] ) )  { Func::returnMsg( 'Valid email must be entered', 0 ); 	return false; }\n	  if( empty( $_POST['fname'] ) ) 			 { Func::returnMsg( 'Please enter a name.', 0 ); 			return false; }\n	  if( empty( $_POST['subject'] ) ) 			 { Func::returnMsg( 'Please enter a subject.', 0 ); 		return false; }\n	  if( strlen( $_POST['message'] ) < 5 )		 { Func::returnMsg( 'Please enter a valid message.', 0 ); 	return false; }\n	  $mailsubject = 'Masage recived from '.site_name.' Contact form';\n	  $body = \"\n	  The person that contacted you is \".$_POST['fname'].\"\n	  E-mail:  \".$_POST['mail'].\"\n	  Subject: \".$_POST['subject'].\"\n	  Message: \".$_POST['message'].\"\";\n		if( @mail( admin_email, $_POST['subject'], $body ) )\n		{\n		Func::returnMsg( 'Thank you fo your messege. We will contact you shortly.' );\n		} else {\n		Func::returnMsg( 'Please try contacting us dirrecly at <a href=\"mailto:'.admin_email.'\">'.admin_email.'</a>', 0 );\n		}\n	}\n\n} /* End Class */\n\n	/* Initialize Session */\n	$oSession = new Session( $oMySQL );\n?>",
			"file": "/G/WALDIRoCOM/pedro/session.php",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 13609,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Java/JavaC.sublime-build",
	"command_palette":
	{
		"height": 311.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"packge",
				"Package Control: Install Package"
			],
			[
				"Floobits - Complete Sign Up",
				"Floobits - Complete Sign Up"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"packge inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: Install Package",
				"Package Control: Install Package"
			],
			[
				"sass",
				"SassBeautify"
			],
			[
				"Sass",
				"SassBeautify: Convert from SASS to current type"
			],
			[
				"packge control: int",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"install sourcetalk",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"sassbuilder",
			"Install Package",
			"Package Control: Install Package",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/G/xampp/htdocs/gw2alts/images",
		"/G/xampp/htdocs/gw2alts/images/alt_face",
		"/G/xampp/htdocs/gw2alts/images/bg",
		"/G/xampp/htdocs/gw2alts/includes",
		"/G/xampp/htdocs/gw2alts/includes/alts",
		"/G/xampp/htdocs/gw2alts/includes/Form-Validator",
		"/G/xampp/htdocs/gw2alts/includes/members"
	],
	"file_history":
	[
		"/G/xampp/htdocs/gw2alts/includes/RelationalArrays.class.php",
		"/G/xampp/htdocs/gw2alts/includes/Mysql.class.php",
		"/G/WALDIRoCOM/pedro/admin.php",
		"/G/xampp/htdocs/gw2alts/css/sass/main.scss",
		"/G/xampp/htdocs/gw2alts/css/sass/_base.scss",
		"/G/xampp/htdocs/gw2alts/index.php",
		"/G/WALDIRoCOM/pedro/onepage.php",
		"/G/WALDIRoCOM/pedro/onepage2.php",
		"/G/WALDIRoCOM/pedro/paginator.class.php",
		"/G/WALDIRoCOM/pedro/videos.php",
		"/G/WALDIRoCOM/pedro/videos.class.php",
		"/C/Users/Wally/AppData/Local/Temp/Rar$DI02.031/MyVideo.php",
		"/G/WALDIRoCOM/pedro/upload.form.php",
		"/G/WALDIRoCOM/pedro/session.php",
		"/G/WALDIRoCOM/pedro/upload.class.php",
		"/G/WALDIRoCOM/pedro/splash.php",
		"/G/WALDIRoCOM/pedro/packages.bk.1.php",
		"/G/WALDIRoCOM/pedro/img.php",
		"/G/WALDIRoCOM/pedro/class.mysql.php",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/Java/Java.sublime-build",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/Java.sublime-build",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/SlotMachine/SlotMachine.java",
		"/C/Users/Wally/runJava.bat",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/Javatar/README.md",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/Javatar/Java/Proto.javatar-packages",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/Javatar/Javatar.sublime-settings",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/javac + exec.sublime-build",
		"/G/xampp/htdocs/gw2alts/includes/Form-Validator/Validate.class.php",
		"/G/xampp/htdocs/gw2alts/includes/alts/create-alt.php",
		"/G/xampp/htdocs/gw2alts/items.php",
		"/G/xampp/htdocs/gw2alts/css/sass/Sass-Mixins/_mixins.scss",
		"/G/xampp/htdocs/gw2alts/css/sass/_mixins.scss",
		"/G/xampp/htdocs/gw2alts/alts.php",
		"/G/xampp/htdocs/gw2alts/includes/Tools.class.php",
		"/G/xampp/htdocs/gw2alts/includes/members/User.class.php",
		"/G/xampp/htdocs/gw2alts/includes/items/Items.class.php",
		"/G/xampp/htdocs/gw2alts/my-alts.php",
		"/G/xampp/htdocs/gw2alts/includes/includes.php",
		"/G/xampp/htdocs/gw2alts/css/sass/_topNav.scss",
		"/G/xampp/htdocs/gw2alts/css/main.css",
		"/G/xampp/htdocs/gw2alts/includes/define.php",
		"/C/Users/Wally/AppData/Local/Temp/Rar$DI00.718/styles.css",
		"/C/Users/Wally/AppData/Local/Temp/Rar$DI00.407/styles.css",
		"/G/xampp/htdocs/gw2alts/includes/Process.class.php",
		"/G/xampp/htdocs/gw2alts/css/cssmenu/styles.css",
		"/G/xampp/htdocs/gw2alts/includes/members/register-form.php",
		"/G/xampp/htdocs/gw2alts/includes/Items/Items.class.php",
		"/G/xampp/htdocs/gw2alts/includes/members/Login.class.php",
		"/G/xampp/htdocs/gw2alts/js/slick/css/style.css",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/updateDBForm.php",
		"/G/xampp/htdocs/gw2alts/includes/alts/Gw2Alts.class.php",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/SlotMachineTest.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/SlotMachine.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/Rectangle.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/Pet.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/PetDemoLab6.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/FruitSoldWindow.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/FruitArray.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/BankChargesDemo.java",
		"/G/Waldir's Documents/RVCC/Into to COmp/Java/SlotMachine/SlotMachineTest.java",
		"/G/xampp/htdocs/gw2alts/includes/autoloader.php",
		"/G/xampp/htdocs/gw2alts/js/slick-1.3.11/css/style.css",
		"/G/xampp/htdocs/gw2alts/includes/aSearch.class.php",
		"/G/xampp/htdocs/gw2alts/Log.txt",
		"/C/Users/Wally/AppData/Local/Temp/Rar$DI06.432/README.md",
		"/G/WALDIRoCOM/pedro/index.php",
		"/G/WALDIRoCOM/pedro/style.css",
		"/G/xampp/htdocs/gw2alts/includes/Gw2Api.class.php",
		"/G/xampp/htdocs/gw2alts/includes/members/update-profile.php",
		"/G/xampp/htdocs/gw2alts/includes/members/loggedin-form.php",
		"/G/WALDIRoCOM/pedro/class.functions.php",
		"/G/xampp/htdocs/gw2alts/includes/members/Registration.class.php",
		"/G/xampp/htdocs/gw2alts/includes/members/logged_in.php",
		"/G/xampp/htdocs/gw2alts/includes/members/register.php",
		"/G/xampp/htdocs/gw2alts/includes/members/index.php",
		"/G/xampp/htdocs/gw2alts/includes/members/config/db.php",
		"/G/xampp/htdocs/gw2alts/includes/members/views/.htaccess",
		"/G/xampp/htdocs/gw2alts/includes/members/views/register.php",
		"/G/xampp/htdocs/gw2alts/includes/members/views/logged_in.php",
		"/G/xampp/htdocs/gw2alts/includes/members/views/not_logged_in.php",
		"/G/xampp/htdocs/gw2alts/members/Registration.class.php",
		"/G/xampp/htdocs/gw2alts/members/classes/Registration.php",
		"/G/xampp/htdocs/gw2alts/members/config/db.php",
		"/G/xampp/htdocs/gw2alts/members/register.php",
		"/G/xampp/htdocs/gw2alts/members/views/register.php",
		"/G/xampp/htdocs/gw2alts/members/_installation/02-create-and-fill-users-table.sql",
		"/G/xampp/htdocs/gw2alts/members/_installation/01-create-database.sql",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Armor.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Back.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Consumable.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Trinket.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/UpgradeComponent.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Weapon.class.php",
		"/G/xampp/htdocs/gw2alts/includes/Bag.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Tool.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Gizmo.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Gathering.class.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/Container.class.php",
		"/C/Users/Wally/Desktop/Website/index.html",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/register.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/README.md",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/views/register.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/views/not_logged_in.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/views/logged_in.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/views/.htaccess",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/libraries/password_compatibility_library.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/_installation/01-create-database.sql",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/config/db.php",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/_installation/02-create-and-fill-users-table.sql",
		"/G/xampp/htdocs/gw2alts/php-login-minimal-master/classes/Login.php",
		"/G/xampp/htdocs/gw2alts/includes/GW2API/CraftingMaterial.class.php",
		"/C/Users/Wally/floobits/welcome.md",
		"/G/xampp/htdocs/gw2alts/css/.sass-cache/d7c30689dee34c5f7c4df6ce0f77bbedc111ddb8/_bourbon-deprecated-upcoming.scssc",
		"/G/xampp/htdocs/gw2alts/css/.sass-cache/4401f7b5da89e827222c1704605273026d5f1e10/_support.scssc",
		"/G/xampp/htdocs/gw2alts/css/.sass-cache/1c75793d093975f6cbefb3afc69a2d7ee4a88460/_opacity.scssc",
		"/G/xampp/htdocs/gw2alts/css/config.rb",
		"/G/xampp/htdocs/gw2alts/css/__main.css",
		"/G/xampp/htdocs/gw2alts/css/sass/_rarity.scss",
		"/G/xampp/htdocs/gw2alts/css/scss/config.rb",
		"/G/xampp/htdocs/gw2alts/css/scss/test.scss",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/User/PHP.sublime-settings",
		"/C/Users/Wally/AppData/Roaming/Sublime Text 3/Packages/User/Distraction Free.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"saveSiteSettings",
			"action",
			"javac",
			"();",
			"executeSQL",
			"Query",
			"update",
			"select",
			"</p>",
			"<p>",
			"islo",
			"tbl-header",
			">\n",
			"\">\n",
			"scrolltop",
			"totop",
			"top",
			"print",
			"var_",
			"print",
			"setSearchVars",
			"search",
			"order",
			"like",
			"aSearch ",
			"search",
			"where",
			"setSharedQuery",
			"al",
			"startPoint",
			"setOrder",
			"select",
			"aType",
			"total",
			"echo",
			"print",
			"echo",
			"$db->",
			"$wheretypes",
			"$datatypes",
			"CleanData",
			"arrayedResults",
			"mysql_",
			"result",
			"lastQuery",
			"setTotalItems",
			"count",
			"SecureData",
			"$q, $this->link",
			"databaseLink",
			"mysql_",
			"$query",
			"closeConnection",
			"$query",
			"aExclude",
			"sTable",
			"aVars",
			"iAffected",
			"iRecords",
			"aResult",
			"$sSQLQuery",
			"sLastQuery",
			"sLastError",
			"user",
			"showmenu",
			"show",
			"h1",
			"tri",
			"cite",
			"trian",
			"opac",
			"opas",
			"art",
			"br",
			"tip",
			"tbl",
			"content-box",
			"content-",
			"cite",
			"main",
			"201c",
			"block",
			"main",
			"content",
			"tips",
			"menu",
			"main",
			"tips",
			"cover",
			"manage",
			"toggle",
			"icons",
			"sleep",
			"header",
			"-box",
			"main",
			"content-box",
			"main",
			"footer",
			"main",
			"footer",
			"main",
			"content-box",
			"main",
			"#content",
			"content",
			"transp",
			"trans",
			"footer",
			"content",
			"content-width",
			"cont",
			"footer",
			"pre-",
			"#content",
			"fff",
			"input",
			"#content",
			"footer",
			"#content",
			"header",
			"#content",
			"grad",
			"footer",
			"foot",
			"header",
			"pre",
			"gradient"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"</div>",
			"<div>",
			"$this->link, $q",
			"link",
			"mysqli_",
			"$q",
			"exclude",
			"table",
			"vars",
			"affected",
			"records",
			"result",
			"$q",
			"lastQuery",
			"lastError",
			"topNavMenu",
			"#topNav",
			"    ",
			"startPoint",
			"=> array( 1",
			"'",
			"$",
			"isLoggedIn",
			"class=\"tbl-col-",
			"userName",
			"  ",
			"$db->",
			"$this->",
			"$newPassword",
			"newEmail",
			"newUsername",
			"newPassword",
			"['details']",
			"$aItemsId",
			"@extend %white-text"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "js/js.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7116,
						"regions":
						{
						},
						"selection":
						[
							[
								1856,
								1856
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 924.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "includes/alts/create-alt.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 968,
						"regions":
						{
						},
						"selection":
						[
							[
								460,
								505
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "includes/Tools.class.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14750,
						"regions":
						{
						},
						"selection":
						[
							[
								6711,
								6716
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "my-alts.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1798,
						"regions":
						{
						},
						"selection":
						[
							[
								1120,
								1120
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "includes/Validate.class.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8732,
						"regions":
						{
						},
						"selection":
						[
							[
								7280,
								7280
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3846.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "includes/includes.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 565,
						"regions":
						{
						},
						"selection":
						[
							[
								404,
								408
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "includes/alts/Gw2Alts.class.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12500,
						"regions":
						{
						},
						"selection":
						[
							[
								6416,
								6416
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "includes/Process.class.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 975,
						"regions":
						{
						},
						"selection":
						[
							[
								929,
								929
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "includes/members/User.class.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12136,
						"regions":
						{
						},
						"selection":
						[
							[
								1138,
								1138
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "clock.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 473,
						"regions":
						{
						},
						"selection":
						[
							[
								315,
								315
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/G/WALDIRoCOM/pedro/session.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13609,
						"regions":
						{
						},
						"selection":
						[
							[
								13399,
								13399
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 2199.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 142.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "gw2alts.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 177.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
